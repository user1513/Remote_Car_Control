C51 COMPILER V9.60.0.0   MODBUSCRC16                                                       01/08/2020 15:17:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MODBUSCRC16
OBJECT MODULE PLACED IN ..\Objects\ModbusCRC16.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE ..\HARDWARE\ModbusCRC16\ModbusCRC16.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\USER;..\HARDWARE\ccp;..\HARDWARE\djiReceiver_dr16;..\HARDWARE\timer1;..\HARDWARE\uart1;..\HARDWARE\uart2;..\HARDWARE\ua
                    -rt3;..\HARDWARE\TableTennisDevice;..\HARDWARE\ModbusCRC16) DEBUG OBJECTEXTEND PRINT(..\Listings\ModbusCRC16.lst) TABS(2)
                    - OBJECT(..\Objects\ModbusCRC16.obj)

line level    source

   1          #include "ModbusCRC16.h"
   2          
   3          #if configUSE_MODBUSCRC16_MODE
   4          
   5          #define MODBUS_MODE  1
   6          #if MODBUS_MODE == 1
   7          /*********************************************************************************************************
             -*
   8          ** Function name        :   ModBus_CRC(Look-up table method-查表法)
   9          ** Descriptions         :   计算出modbus_CRC16校验值 
  10          ** parameters           :   arg 传入需要 ModBus_CRC检验数组的首地址
  11          ** parameters           :   length 需要计算检验的位数
  12          ** Returned value       :   返回出modbus_CRC16校验值
  13          **********************************************************************************************************
             -*/
  14          
  15          uint8_t uchCRCHi; //CRC 高字节
  16          uint8_t uchCRCLo; //CRC 低字节
  17          code uint8_t auchCRCHi[] = { /* CRC 高位字节值表*/
  18            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0
             -, 0x80, 0x41,
  19            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1
             -, 0x81, 0x40,
  20            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0
             -, 0x80, 0x41,
  21            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0
             -, 0x80, 0x41,
  22            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1
             -, 0x81, 0x40,
  23            0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1
             -, 0x81, 0x40,
  24            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1
             -, 0x81, 0x40,
  25            0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1
             -, 0x81, 0x40,
  26            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0
             -, 0x80, 0x41,
  27            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0
             -, 0x80, 0x41,
  28            0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1
             -, 0x81, 0x40,
  29            0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0
             -, 0x80, 0x41,
  30            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40} ;
  31          code uint8_t auchCRCLo[] = { /* CRC 低位字节值表*/
  32            0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C
             -, 0x0D, 0xCD,
  33            0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB
             -, 0xDA, 0x1A,
  34            0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12
             -, 0x13, 0xD3,
  35            0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35
C51 COMPILER V9.60.0.0   MODBUSCRC16                                                       01/08/2020 15:17:06 PAGE 2   

             -, 0x34, 0xF4,
  36            0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8
             -, 0xE9, 0x29,
  37            0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7
             -, 0xE6, 0x26,
  38            0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6
             -, 0xA7, 0x67,
  39            0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9
             -, 0xA8, 0x68,
  40            0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74
             -, 0x75, 0xB5,
  41            0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53
             -, 0x52, 0x92,
  42            0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A
             -, 0x9B, 0x5B,
  43            0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D
             -, 0x4C, 0x8C,
  44            0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,0x43, 0x83, 0x41, 0x81, 0x80, 0x40} ;
  45          uint16_t ModBus_CRC(uint8_t * arg, uint16_t length)
  46          { uint8_t i;
  47   1        uchCRCHi = 0xFF;
  48   1        uchCRCLo = 0xFF;
  49   1        while (length--)
  50   1        {
  51   2          i = uchCRCHi ^ (*arg++);
  52   2          uchCRCHi = uchCRCLo ^ auchCRCHi[i];
  53   2          uchCRCLo = auchCRCLo[i];
  54   2        }
  55   1        return (uchCRCHi << 8 | uchCRCLo);
  56   1      }
  57          
  58          #elif  == 2
              
              /*********************************************************************************************************
             -*
              ** Function name        :   ModBus_CRC（computation-计算法）
              ** Descriptions         :   计算出modbus_CRC16校验值
              ** parameters           :   arg 传入需要 ModBus_CRC检验数组的首地址
              ** parameters           :   length 需要计算检验的位数
              ** Returned value       :   返回出modbus_CRC16校验值
              **********************************************************************************************************
             -*/
              uint16_t ModBus_CRC(uint8_t *arg, uint16_t length)
              {
                  uint16_t Reg_CRC=0xffff;
                  uint8_t Temp_Reg=0x00;
                  uint8_t i,j;
                  for(i=0;i<length;i++)
                  {
                      Reg_CRC ^= *arg++;
                      for(j=0;j<8;j++)
                      {
                          if(Reg_CRC&0x0001)
                          {
                              Reg_CRC=Reg_CRC>>1^0xA001;
                          }
                          else
                          {
                              Reg_CRC >>=1;
                          }
                      }
                  }
C51 COMPILER V9.60.0.0   MODBUSCRC16                                                       01/08/2020 15:17:06 PAGE 3   

                  Temp_Reg = Reg_CRC;
                  Reg_CRC= (Reg_CRC >> 8)&0x00ff;
                  Reg_CRC = (Temp_Reg << 8) | Reg_CRC;
                  return Reg_CRC;
              }
              #endif
  93          
  94          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     66    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
